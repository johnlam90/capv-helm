apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: {{ .Values.name }}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    kind: KubeadmControlPlane
    name: {{ .Values.name }}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereCluster
    name: {{ .Values.name }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: HAProxyLoadBalancer
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: {{ .Values.name }}
  name: {{ .Values.name }}
  namespace: default
spec:
  user:
    authorizedKeys:
    - {{ .Values.key }}
    name: capv
  virtualMachineConfiguration:
    cloneMode: linkedClone
    datacenter: {{ .Values.datacenter }}
    datastore: {{ .Values.datastore }}
    diskGiB: {{ .Values.haproxy.disk }}
    folder: /{{ .Values.datacenter }}/vm/Testing/K8s
    memoryMiB: {{ .Values.haproxy.memory }}
    network:
      devices:
      - dhcp4: true
        networkName: {{ .Values.net1 }}
      - dhcp4: true
        networkName: {{ .Values.net2 }}

    numCPUs: {{ .Values.haproxy.vcpu }}
    resourcePool: {{ .Values.cluster }}/Resources/k8s
    server: {{ .Values.server }}
    template: {{ .Values.haproxy.template }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereCluster
metadata:
  name: {{ .Values.name }}
  namespace: default
spec:
  cloudProviderConfiguration:
    global:
      insecure: true
      secretName: cloud-provider-vsphere-credentials
      secretNamespace: kube-system
    network:
      name: {{ .Values.net1 }}
    providerConfig:
      cloud:
        controllerImage: gcr.io/cloud-provider-vsphere/cpi/release/manager:v1.0.0
      storage:
        attacherImage: quay.io/k8scsi/csi-attacher:v2.0.0
        controllerImage: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.0.0
        livenessProbeImage: quay.io/k8scsi/livenessprobe:v1.1.0
        metadataSyncerImage: gcr.io/cloud-provider-vsphere/csi/release/syncer:v2.0.0
        nodeDriverImage: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.0.0
        provisionerImage: quay.io/k8scsi/csi-provisioner:v1.4.0
        registrarImage: quay.io/k8scsi/csi-node-driver-registrar:v1.2.0
    virtualCenter:
      {{ .Values.server }}:
        datacenters: {{ .Values.datacenter }}
    workspace:
      datacenter: {{ .Values.datacenter }}-2
      datastore: {{ .Values.datastore }}
      folder: /{{ .Values.datacenter }}/vm/Testing/K8s
      resourcePool: {{ .Values.cluster }}/Resources/k8s
      server: {{ .Values.server }}
  loadBalancerRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: HAProxyLoadBalancer
    name: {{ .Values.name }}
  server: {{ .Values.server }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereMachineTemplate
metadata:
  name: {{ .Values.name }}
  namespace: default
spec:
  template:
    spec:
      cloneMode: linkedClone
      datacenter: {{ .Values.datacenter }}
      datastore: {{ .Values.datastore }}
      diskGiB: {{ .Values.machine.disk }}
      folder: /{{ .Values.datacenter }}/vm/Testing/K8s
      memoryMiB: {{ .Values.machine.memory }}
      network:
        devices:
        - dhcp4: true
          networkName: {{ .Values.net1 }}
      numCPUs: {{ .Values.machine.vcpu }}
      resourcePool: {{ .Values.cluster }}/Resources/k8s
      server: {{ .Values.server }}
      template: {{ .Values.machine.template }}
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
kind: KubeadmControlPlane
metadata:
  name: {{ .Values.name }}
  namespace: default
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereMachineTemplate
    name: {{ .Values.name }}
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
        name: {{`'{{ ds.meta_data.hostname }}'`}}
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
        name: {{`'{{ ds.meta_data.hostname }}'`}}
    preKubeadmCommands:
    - hostname {{`"{{ ds.meta_data.hostname }}"`}}
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1  {{`{{ ds.meta_data.hostname }}`}}" >>/etc/hosts
    - echo {{`"{{ ds.meta_data.hostname }}"`}} >/etc/hostname
    useExperimentalRetryJoin: true
    users:
    - name: capv
      sshAuthorizedKeys:
      - {{ .Values.key }}

      sudo: ALL=(ALL) NOPASSWD:ALL
  replicas: {{ .Values.control.replicas}}
  version: {{ .Values.version}}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: {{ .Values.name }}-md-0
  namespace: default
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: {{`'{{ ds.meta_data.hostname }}'`}}
      preKubeadmCommands:
      - hostname {{`"{{ ds.meta_data.hostname }}"`}}
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{`{{ ds.meta_data.hostname }}`}}" >>/etc/hosts
      - echo {{`"{{ ds.meta_data.hostname }}"`}} >/etc/hostname
      useExperimentalRetryJoin: true
      users:
      - name: capv
        sshAuthorizedKeys:
        - {{ .Values.key }}
        
        sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: {{ .Values.name }}
  name: {{ .Values.name }}-md-0
  namespace: default
spec:
  clusterName: {{ .Values.name }}
  replicas: {{ .Values.node.replicas}}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: {{ .Values.name }}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: {{ .Values.name }}
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
          name: {{ .Values.name }}-md-0
      clusterName: {{ .Values.name }}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: VSphereMachineTemplate
        name: {{ .Values.name }}
      version: {{ .Values.version}}

